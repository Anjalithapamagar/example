package ca.centennial.finalproyect.ui.screens.db

import android.annotation.SuppressLint
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.staggeredgrid.LazyVerticalStaggeredGrid
import androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.List
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign

import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import ca.centennial.finalproyect.R
import ca.centennial.finalproyect.model.Note
import ca.centennial.finalproyect.utils.FirestoreManager

import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch


//La anotación @OptIn se usa para habilitar el uso de API experimentales en Kotlin.
//The @OptIn annotation is used to enable the use of experimental APIs in Kotlin.
@OptIn(ExperimentalFoundationApi::class)
//directive used in Android to tell the compiler to ignore certain specific
// types of warnings or errors that might be generated by naming conventions
// or style rules in the code.
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
//@Preview
/*
ES
@Composable que representa la pantalla principal de las notas.
Muestra una lista de notas y ofrece la posibilidad de agregar nuevas notas mediante un diálogo
(AddNoteDialog) activado por un botón flotante (FloatingActionButton).
Utiliza LazyVerticalStaggeredGrid para mostrar las notas en una cuadrícula vertical con un
diseño escalonado.

EN:

@Composable that represents the main notes screen.
Displays a list of notes and offers the ability to add new notes using a dialog (AddNoteDialog)
activated by a floating button (FloatingActionButton).
Use LazyVerticalStaggeredGrid to display notes in a vertical grid with a staggered layout.
 */
@Composable
fun TrackerScreen(firestore: FirestoreManager) {
/*
var showAddNoteDialog by remember { mutableStateOf(false) }

La sintaxis var showAddNoteDialog by remember { mutableStateOf(false) } es una forma de delegación de
propiedades en Kotlin. Esta sintaxis permite que showAddNoteDialog use el valor proporcionado por
mutableStateOf y actualice la interfaz de usuario cada vez que el valor cambia.
EN
The syntax var showAddNoteDialog by remember { mutableStateOf(false) } is a form of delegation
properties in Kotlin. This syntax allows showAddNoteDialog to use the value provided by
mutableStateOf and update the UI every time the value changes.
 */
    var showAddNoteDialog by remember { mutableStateOf(false) }

    val notes by firestore.getNotesFlow().collectAsState(emptyList())

    val scope = rememberCoroutineScope()

    Scaffold(
        floatingActionButton = {
            FloatingActionButton(
                onClick = {
                    showAddNoteDialog = true
                },
            ) {
                Icon(imageVector = Icons.Default.Add, contentDescription = stringResource(R.string.add_note))
            }
            if (showAddNoteDialog) {
                AddNoteDialog(
                    onNoteAdded = { note ->
                        scope.launch {
                            firestore.addNote(note)
                        }
                        showAddNoteDialog = false
                    },
                    onDialogDismissed = { showAddNoteDialog = false },
                )
            }
        }
    ) {
        if(!notes.isNullOrEmpty()) {
            LazyVerticalStaggeredGrid(
                columns = StaggeredGridCells.Fixed(1),
                contentPadding = PaddingValues(4.dp)
            ) {
                notes.forEach {
                    item {
                        NoteItem(note = it, firestore = firestore)
                    }
                }
            }
        } else{
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Icon(imageVector = Icons.Default.List, contentDescription = null, modifier = Modifier.size(100.dp))
                Spacer(modifier = Modifier.height(16.dp))
                Text(text = stringResource(R.string.no_notes_found),
                    fontSize = 18.sp, fontWeight = FontWeight.Thin,
                    textAlign = TextAlign.Center)
            }
        }
    }
}

@Composable
fun NoteItem(note: Note, firestore: FirestoreManager) {
    var showDeleteNoteDialog by remember { mutableStateOf(false) }

    val onDeleteNoteConfirmed: () -> Unit = {
        CoroutineScope(Dispatchers.Default).launch {
            firestore.deleteNote(note.id ?: "")
        }
    }

    if (showDeleteNoteDialog) {
        DeleteNoteDialog(
            onConfirmDelete = {
                onDeleteNoteConfirmed()
                showDeleteNoteDialog = false
            },
            onDismiss = {
                showDeleteNoteDialog = false
            }
        )
    }

    Card(
        modifier = Modifier.padding(6.dp),
    ) {
        Column(
            modifier = Modifier
                .padding(12.dp)
                .fillMaxWidth()
        ) {
            Text(text = note.title,
                fontWeight = FontWeight.Bold,
                fontSize = 24.sp,)
            Spacer(modifier = Modifier.height(8.dp))
            Text(text = "Weight: ${note.weight}",
                fontWeight = FontWeight.Medium,
                fontSize = 20.sp,
                lineHeight = 15.sp)
            Spacer(modifier = Modifier.height(8.dp))
            Text(text = "BMI: ${note.bmiResult} ",
                fontWeight = FontWeight.Medium,
                fontSize = 20.sp,
                lineHeight = 15.sp)
            Spacer(modifier = Modifier.height(8.dp))
            Text(text = "Category: ${note.bmiCategory}",
                fontWeight = FontWeight.Medium,
                fontSize = 20.sp,
                lineHeight = 15.sp)
            Spacer(modifier = Modifier.height(8.dp))
            IconButton(
                onClick = { showDeleteNoteDialog = true },
                modifier = Modifier.align(alignment = Alignment.CenterHorizontally)

            ) {
                Icon(imageVector = Icons.Default.Delete, contentDescription = "Delete Icon")
            }
        }
    }
}


/*
ES
@Composable que muestra un diálogo para agregar una nueva nota.
Contiene campos de entrada para el título y el contenido de la nota. Al presionar el botón
"Agregar", se crea una nueva nota y se pasa al callback onNoteAdded.

EN
@Composable showing a dialog to add a new note.
Contains input fields for the title and content of the note. Pressing the "Add" button creates a
 new note and passes it to the onNoteAdded callback.
 */
@Composable
fun AddNoteDialog(onNoteAdded: (Note) -> Unit, onDialogDismissed: () -> Unit) {
    var title by remember { mutableStateOf("") }
    var height by remember { mutableStateOf("") }
    var weight by remember { mutableStateOf("") }
    var bmiResult by remember { mutableStateOf("") }
    var bmiCategory by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = {},
        title = { Text("BMI Calculator") },
        confirmButton = {
            Button(
                onClick = {
                    if (weight.isNotEmpty() && height.isNotEmpty()) {
                        val weightValue = weight.toFloat()
                        val heightValue = height.toFloat()
                        val bmi = calculateBMI(weightValue, heightValue)
                        bmiResult = bmi.toString()
                        bmiCategory = getBMICategory(bmi)
                    }
                    val newNote = Note(
                        title = title,
                        height = height,
                        weight = weight,
                        bmiResult = bmiResult,
                        bmiCategory = bmiCategory
                        )
                    onNoteAdded(newNote)
                    title = ""
                    height = ""
                    weight = ""
                }
            ) {
                Text(text = stringResource(R.string.add))
            }
        },
        dismissButton = {
            Button(
                onClick = {
                    onDialogDismissed()
                }
            ) {
                Text(text = stringResource(R.string.cancelar))
            }
        },
        text = {
            Column {
                TextField(
                    value = title,
                    onValueChange = { title = it },
                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Text),
                    label = { Text(text = stringResource(R.string.title)) }
                )
                Spacer(modifier = Modifier.height(8.dp))
                TextField(
                    value = height,
                    onValueChange = { height = it },
                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Text),
                    label = { Text("Height in (Meters)") }
                )
                Spacer(modifier = Modifier.height(8.dp))
                TextField(
                    value = weight,
                    onValueChange = { weight = it },
                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Text),
                    label = { Text("Weight in (Kilograms)") }
                )
            }
        }
    )
}

fun calculateBMI(weight: Float, height: Float): Float {
    return weight / (height * height)
}

fun getBMICategory(bmi: Float): String {
    return when {
        bmi < 18.5 -> "Underweight"
        bmi in 18.5..24.9 -> "Normal weight"
        bmi in 25.0..29.9 -> "Overweight"
        else -> "Obesity"
    }
}

@Composable
fun DeleteNoteDialog(onConfirmDelete: () -> Unit, onDismiss: () -> Unit) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(stringResource(R.string.delete_record)) },
        text = { Text(stringResource(R.string.are_you_sure_you_want_to_delete_record)) },
        confirmButton = {
            Button(
                onClick = onConfirmDelete
            ) {
                Text(stringResource(R.string.accept))
            }
        },
        dismissButton = {
            Button(
                onClick = onDismiss
            ) {
                Text(stringResource(R.string.cancelar))
            }
        }
    )
}